import numpy as np
y=np.array([[10,100],[12,110],[11,105],[9,94],[9,95],[10,99],[11,104],[12,108],[11,105],[10,98],[11,103],[12,110]])
x=np.array([[1,9,62,1.0],[1,8,58,1.3],[1,7,64,1.2],[1,14,60,0.8],[1,12,63,0.8],[1,10,57,0.9],[1,7,55,1.0],[1,4,56,1.2],[1,6,59,1.1],[1,5,61,1.0],[1,7,57,1.2],[1,6,60,1.2]])
def transpose(a):
    res=np.zeros((4,12),dtype="float")
    for i in range(len(a)):
        for j in range(len(a[0])):
            res[j][i]=a[i][j]
    return res
def mul(m1,m2):
    res=np.zeros([m1.shape[0],m2.shape[1]],dtype="float")
    for i in range(len(m1)):
        for j in range(len(m2[0])):
            for k in range(len(m2)):
                res[i][j]+=m1[i][k]*m2[k][j]
    return res 
def cof(a):
    arr=np.zeros((4,4),dtype="float")
    if(len(a)==2):
        arr[0][0]=a[1][1]
        arr[1][1]=a[0][0]
        arr[0][1]=-1*a[0][1]
        arr[1][0]=-1*a[1][0]
    else:
        arr[0][0]=a[1][1]*a[2][2]-(a[1][2]*a[2][1])
        arr[0][1]=-1*(a[1][0]*a[2][2]-(a[1][2]*a[2][0]))
        arr[0][2]=a[1][0]*a[2][1]-(a[1][1]*a[2][0])
        arr[1][0]=-1*(a[0][1]*a[2][2]-(a[2][1]*a[0][2]))
        arr[1][1]=a[0][0]*a[2][2]-(a[2][0]*a[0][2])
        arr[1][2]=-1*(a[0][0]*a[2][1]-(a[2][0]*a[0][1]))
        arr[2][0]=a[0][1]*a[1][2]-(a[1][1]*a[0][2])
        arr[2][1]=-1*(a[0][0]*a[1][2]-(a[1][0]*a[0][2]))
        arr[2][2]=a[0][0]*a[1][1]-(a[1][0]*a[0][1])
    return arr
def det(a):
    arr=[]
    if(len(a)==2):
        arr=a[0][0]*a[1][1]-a[1][0]*a[0][1]
    else:
        arr=a[0][0]*((a[1][1]*a[2][2])-(a[2][1]*a[1][2]))-(a[0][1]*((a[1][0]*a[2][2])-(a[2][0]*a[1][2])))+(a[0][2]*((a[1][0]*a[2][1])-(a[2][0]*a[1][1])))
    return arr
x_trans=transpose(x)
print("trans of x:",x_trans)
xtx=np.zeros((4,4),dtype="float")
xtx=mul(x_trans,x)
print("mul of xt,x :",xtx)
inv=cof(xtx)/det(xtx)
print("inv:",inv)
xty=np.zeros((4,2),dtype="float")
xty=mul(x_trans,y)
print("mul of xt,y :",xty)
b=mul(inv,xty)
rounded_b=np.round(b,3)
print("Beta:",rounded_b)
#print(f"fitting for profit:y1={b_rounded[0][0]}+{b_rounded[1][0]}x1+{b_rounded[2][0]}x2+{b_rounded[3][0]}x3")
#print(f"fitting for profit:y2={b_rounded[0][1]}+{b_rounded[1][1]}x1+{b_rounded[2][1]}x2+{b_rounded[3][1]}x3")
for i in range(y.shape[1]):
    print(f"fitting for profit y{i+1} = {rounded_b[0][i]} + {rounded_b[1][i]}x1 + {rounded_b[2][i]}x2 + {rounded_b[3][i]}x3")
